<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/security  
            http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- 配置不过滤的资源（静态资源及登录相关） -->
	<security:http pattern="/**/*.css" security="none" />
	<security:http pattern="/**/*.js" security="none" />
	<security:http pattern="/**/*.jpg" security="none" />
	<security:http pattern="/**/*.jpeg" security="none" />
	<security:http pattern="/**/*.gif" security="none" />
	<security:http pattern="/**/*.png" security="none" />
	<security:http pattern="/**/*.ico" security="none" />
	<!-- 不过滤验证码 -->
	<security:http pattern="/captcha-image.htm" security="none" />
	<!-- 不过滤登录页面 -->
	<security:http pattern="/login.htm" security="none" />
	<security:http pattern="/login.jsp" security="none" />
	<!-- 不过滤首页 -->
	<security:http pattern="/index.htm" security="none" />
	<security:http pattern="/index.jsp" security="none" />

	<!-- 配置SpringSecurity的http安全服务 -->
	<!-- 配置了auto-config="true"loginFilter报错，如果你没有自定义的登录页面，它就会跳转到security默认的登录页面中。 -->
	<security:http access-denied-page="/accessDenied.jsp" entry-point-ref="authenticationProcessingFilterEntryPoint">
		
		<!-- 配置登出信息，指定退出系统后，跳转页面 -->
		<security:logout logout-url="/logout"
			logout-success-url="/login.htm" invalidate-session="true" />
		
		<!-- 认证和授权 -->
		<!-- custom-filter中before是在这个filter之前，after是之后，position是替换 -->
		<security:custom-filter ref="myLoginFilter" position="FORM_LOGIN_FILTER"  />
		<security:custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		
		<security:custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER"/>  
		
		<!-- session-fixation-protection=none的时候，固化攻击失效 -->
		<security:session-management  session-authentication-strategy-ref="concurrentSessionControlStrategy" />  
	</security:http>

	<!-- 只能同时一个用户登陆配置开始 -->
	<bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">  
   	 	<constructor-arg name="sessionRegistry" ref="sessionRegistry" />  
   	 	<constructor-arg name="expiredUrl" value="/sessionOut.jsp" />  
	</bean>  
	<bean id="concurrentSessionControlStrategy" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">  
    	<constructor-arg name="sessionRegistry" ref="sessionRegistry" />  
    	<property name="maximumSessions" value="1"></property>  
    </bean>  
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />  
	<!-- 只能同时一个用户登陆配置完毕 -->  
	
	<!-- 认证管理器，配置SpringSecutiry的权限信息 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<!-- 使用数据库中的用户名和密码 -->
			<security:jdbc-user-service
				data-source-ref="dataSource" />
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- 验证配置 ， 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<security:authentication-manager alias="myAuthenticationManager">
		<!-- 使用自己数据库中的用户和角色表,获取用户拥有的权限 -->
		<security:authentication-provider
			user-service-ref="myUserDetailsServiceImpl" />
				<!--<security:authentication-provider ref="loginAuthenticationProvider">
		</security:authentication-provider>-->
		
	</security:authentication-manager>

	
    <!-- 登录验证器 -->
    <bean id="myLoginFilter"
		class="cn.jxufe.core.security.MyUsernamePasswordAuthenticationFilter">
		<!-- 处理登录 -->
		<!-- filterProcessesUrl定义的是登录验证的地址，默认的是j_spring_security_check这里我们改成login.do -->
		<property name="filterProcessesUrl" value="/login.do"></property>
		<property name="usernameParameter" value="username"></property>
		<property name="passwordParameter" value="password"></property>
		<property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"></property>
		<property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"></property>
		<property name="authenticationManager" ref="myAuthenticationManager"></property>
		
		<property name="baseDao" ref="baseDao"></property>
		<!-- session控制，同一账号登录后踢出另一用户 -->
		<property name="sessionAuthenticationStrategy" ref="concurrentSessionControlStrategy" /> 
	</bean>
	
	<bean id="loginLogAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/index.jsp"></property>
		<!-- 如果是放在web-inf下则需要改成true,如/web-inf/index.jsp -->
		<!-- <property name="forwardToDestination" value="true"></property> -->
	</bean>
	<bean id="simpleUrlAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/login.jsp"></property>
	</bean>
	
	
	 <!-- 认证过滤器 -->
    <bean id="securityFilter" class="cn.jxufe.core.security.MySecurityFilter">
    	<!-- 用户拥有的权限 -->
    	<property name="authenticationManager" ref="myAuthenticationManager" />
    	<!-- 用户是否拥有所请求资源的权限 -->
    	<property name="accessDecisionManager" ref="myAccessDecisionManager" />
    	<!-- 资源与权限对应关系 -->
    	<property name="securityMetadataSource" ref="myFilterInvocationSecurityMetadataSource" />
    </bean>
	
    <bean id="myUserDetailsServiceImpl" class="cn.jxufe.core.security.MyUserDetailsService" />
	<bean id="myAccessDecisionManager" class="cn.jxufe.core.security.MyAccessDecisionManager"/>
	<bean id="myFilterInvocationSecurityMetadataSource" class="cn.jxufe.core.security.MyFilterInvocationSecurityMetadataSource" depends-on="securityCacheInit">
		<constructor-arg name="baseDao" ref="baseDao" />    
	</bean>

	<bean id="baseDao" class="cn.jxufe.core.dao.BaseDaoImpl" />
	
	<!-- 定义上下文返回的消息的国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename"
			value="classpath:org/springframework/seurity/messages_zh_CN" />
	</bean>

	<!-- 未登录的切入点 -->  
    <bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">  
        <property name="loginFormUrl" value="/login.jsp"/>  
	</bean>
	
</beans>  